<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<document>
  <properties>
    <title>Examples</title>
    <author email="brunodepaulak AT yahoo DOT com DOT br">Bruno P. Kinoshita</author>
  </properties>

  <body>
    <section name="Examples">
      <p>
         nebular provides basic fuzzy membership functions, that can be used 
         with Java collections to create fuzzy sets.
      </p>
      <p>
         In the example below, we will see how to create a sigmoidal 
         membership function and store its elements and their respective 
         membership values in a HashMap.
      </p>
      <p>
        <pre><![CDATA[
SigmoidalMembershipFunction mf = new SigmoidalMembershipFunction(0.5, 1.5);
Map<Double, Double> map = new LinkedHashMap<Double, Double>();

for(double i = 0.0; i <= 2.0 ; i+=0.01) {
    map.put(i, mf.evaluate(i));
}

NumberFormat nf = NumberFormat.getInstance();
nf.setMinimumFractionDigits(2);
nf.setMaximumFractionDigits(2);
for(Map.Entry<Double, Double> entry : map.entrySet()) {
    System.out.println("i="+nf.format(entry.getKey())+", degree="+nf.format(entry.getValue()));
}]]></pre>
      </p>
      <p>
        The output is a map containing the initial values and its membership 
        degrees, calculated using the sigmoidal membership function.
      </p>
      <p>
        <pre>
i=0.00, degree=0.32
i=0.01, degree=0.32
i=0.02, degree=0.32
i=0.03, degree=0.32
i=0.04, degree=0.33
...
...
...
i=1.95, degree=0.56
i=1.96, degree=0.56
i=1.97, degree=0.56
i=1.98, degree=0.56
i=1.99, degree=0.56
        </pre>
      </p>
    </section>
  </body>
</document>
